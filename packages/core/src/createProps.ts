import { pipe, mapValue, parseArray, parseSingle, toCSSRule, child } from './parsers'
import { ICCSSProps } from './types'
import { mergeDeep } from './utils'

export const createProps = (overrides = {}): Partial<ICCSSProps> => {
    return mergeDeep(
        {
            // Animation + 3D
            a: toCSSRule(overrides, ['anim', 'animation']),
            ad: pipe(mapValue, toCSSRule(overrides, ['anim-del', 'animation-delay'])),
            aDir: pipe(mapValue, toCSSRule(overrides, ['anim-dir', 'animation-direction'])),
            aD: pipe(mapValue, toCSSRule(overrides, ['anim-dur', 'animation-duration'])),
            afm: pipe(mapValue, toCSSRule(overrides, ['anim-fill', 'animation-fill-mode'])),
            aic: toCSSRule(overrides, ['anim-count', 'animation-iteration-count']),
            an: toCSSRule(overrides, ['anim-name', 'animation-name']),
            aps: pipe(mapValue, toCSSRule(overrides, ['anim-state', 'animation-play-state'])),
            ats: pipe(mapValue, toCSSRule(overrides, ['anim-timing', 'animation-timing-function'])),
            bv: pipe(mapValue, toCSSRule(overrides, ['bf-visibility', 'backface-visibility'])),
            per: toCSSRule(overrides, ['persp', 'perspective']),
            pero: toCSSRule(overrides, ['persp-org', 'perspective-origin']),
            tf: toCSSRule(overrides, ['tranf', 'transform']),
            tfo: toCSSRule(overrides, ['tranf-org', 'transform-origin']),
            tfs: toCSSRule(overrides, ['tranf-styl', 'transform-style']),
            tr: pipe(mapValue, toCSSRule(overrides, ['trans', 'transition'])),
            trD: pipe(mapValue, toCSSRule(overrides, ['trans-del', 'transition-delay'])),
            trd: pipe(mapValue, toCSSRule(overrides, ['trans-dur', 'transition-duration'])),
            trp: toCSSRule(overrides, ['trans-prop', 'transition-property']),
            trt: toCSSRule(overrides, ['trans-timing', 'transition-timing-function']),

            // Flex
            f: toCSSRule(overrides, ['fx', 'flex']),
            fd: pipe(mapValue, toCSSRule(overrides, ['fx-dir', 'flex-direction'])),
            fw: pipe(mapValue, toCSSRule(overrides, ['fx-wrap', 'flex-wrap'])),
            fb: pipe(parseSingle, toCSSRule(overrides, ['fx-base', 'flex-basis'])),
            ff: toCSSRule(overrides, ['fx-flow', 'flex-flow']),
            fg: toCSSRule(overrides, ['fx-grow', 'flex-grow']),
            fs: toCSSRule(overrides, ['fx-shrink', 'flex-shrink']),
            ai: pipe(mapValue, toCSSRule(overrides, ['al-items', 'align-items'])),
            ac: pipe(mapValue, toCSSRule(overrides, ['al-content', 'align-content'])),
            ji: pipe(mapValue, toCSSRule(overrides, ['just-items', 'justify-items'])),
            jc: pipe(mapValue, toCSSRule(overrides, ['just-content', 'justify-content'])),
            aS: pipe(mapValue, toCSSRule(overrides, ['al-self', 'align-self'])),
            jS: pipe(mapValue, toCSSRule(overrides, ['just-self', 'justify-self'])),

            // Font + text related
            ft: toCSSRule(overrides, ['ft', 'font']),
            ftf: pipe(mapValue, toCSSRule(overrides, ['ft-family', 'font-family'])),
            ftk: toCSSRule(overrides, ['ft-kern', 'font-kerning']),
            fts: pipe(mapValue, parseSingle, toCSSRule(overrides, ['ft-size', 'font-size'])),
            ftStr: pipe(mapValue, toCSSRule(overrides, ['ft-stretch', 'font-stretch'])),
            ftSty: pipe(mapValue, toCSSRule(overrides, ['ft-style', 'font-style'])),
            ftv: pipe(mapValue, toCSSRule(overrides, ['ft-variant', 'font-variant'])),
            ftw: pipe(mapValue, toCSSRule(overrides, ['ft-weight', 'font-weight'])),
            ls: toCSSRule(overrides, ['ltr-spacing', 'letter-spacing']),
            lh: toCSSRule(overrides, ['line-h', 'line-height']),

            ta: pipe(mapValue, toCSSRule(overrides, ['txt-align', 'text-align'])),
            td: pipe(mapValue, toCSSRule(overrides, ['txt-decor', 'text-decoration'])),
            ti: pipe(parseSingle, toCSSRule(overrides, ['txt-in', 'text-indent'])),
            to: pipe(mapValue, toCSSRule(overrides, ['txt-flow', 'text-overflow'])),
            ts: toCSSRule(overrides, ['txt-shad', 'text-shadow']),
            tt: pipe(mapValue, toCSSRule(overrides, ['txt-tranf', 'text-transform'])),

            va: pipe(mapValue, toCSSRule(overrides, ['v-align', 'vertical-align'])),
            ws: pipe(mapValue, toCSSRule(overrides, ['w-space', 'white-space'])),
            wb: pipe(mapValue, toCSSRule(overrides, ['w-break', 'word-break'])),
            wS: pipe(parseSingle, toCSSRule(overrides, ['w-spacing', 'word-spacing'])),
            ww: pipe(mapValue, toCSSRule(overrides, ['w-wrap', 'word-wrap'])),

            // List
            lstS: pipe(mapValue, toCSSRule(overrides, ['lst', 'list-style'])),
            lstSI: toCSSRule(overrides, ['lst-img', 'list-style-image']),
            lstSP: toCSSRule(overrides, ['lst-pos', 'list-style-position']),
            lstST: pipe(mapValue, toCSSRule(overrides, ['lst-type', 'list-style-type'])),

            // Margin
            m: pipe(parseArray, toCSSRule(overrides, ['mar', 'margin'])),
            mt: pipe(parseSingle, toCSSRule(overrides, ['mar-top', 'margin-top'])),
            mr: pipe(parseSingle, toCSSRule(overrides, ['mar-right', 'margin-right'])),
            mb: pipe(parseSingle, toCSSRule(overrides, ['mar-bottom', 'margin-bottom'])),
            ml: pipe(parseSingle, toCSSRule(overrides, ['mar-left', 'margin-left'])),

            // Padding
            p: pipe(parseArray, toCSSRule(overrides, ['pad', 'padding'])),
            pt: pipe(parseSingle, toCSSRule(overrides, ['pad-top', 'padding-top'])),
            pr: pipe(parseSingle, toCSSRule(overrides, ['pad-right', 'padding-right'])),
            pb: pipe(parseSingle, toCSSRule(overrides, ['pad-bottom', 'padding-bottom'])),
            pl: pipe(parseSingle, toCSSRule(overrides, ['pad-left', 'padding-left'])),

            // Background
            bg: pipe(mapValue, toCSSRule(overrides, ['bg', 'background'])),
            bgi: pipe(mapValue, toCSSRule(overrides, ['bg-img', 'background-image'])),
            bgc: pipe(mapValue, toCSSRule(overrides, ['bg-color', 'background-color'])),
            bgs: pipe(mapValue, toCSSRule(overrides, ['bg-size', 'background-size'])),
            bgr: pipe(mapValue, toCSSRule(overrides, ['bg-repeat', 'background-repeat'])),
            bgp: pipe(mapValue, toCSSRule(overrides, ['bg-pos', 'background-position'])),
            bga: pipe(mapValue, toCSSRule(overrides, ['bg-attach', 'background-attachment'])),
            bgbm: pipe(mapValue, toCSSRule(overrides, ['bg-blend', 'background-blend-mode'])),
            bgC: pipe(mapValue, toCSSRule(overrides, ['bg-clip', 'background-clip'])),
            bgo: pipe(mapValue, toCSSRule(overrides, ['bg-org', 'background-origin'])),

            // Dimension
            w: pipe(mapValue, parseSingle, toCSSRule(overrides, ['wid', 'width'])),
            h: pipe(mapValue, parseSingle, toCSSRule(overrides, ['hei', 'height'])),
            minW: pipe(mapValue, parseSingle, toCSSRule(overrides, ['min-wid', 'min-width'])),
            minH: pipe(mapValue, parseSingle, toCSSRule(overrides, ['min-hei', 'min-height'])),
            maxW: pipe(mapValue, parseSingle, toCSSRule(overrides, ['max-wid', 'max-width'])),
            maxH: pipe(mapValue, parseSingle, toCSSRule(overrides, ['max-hei', 'max-height'])),

            // Grid
            g: toCSSRule(overrides, ['gr', 'grid']),
            ga: toCSSRule(overrides, ['gr-area', 'grid-area']),
            gac: toCSSRule(overrides, ['gr-auto-cols', 'grid-auto-columns']),
            gaf: toCSSRule(overrides, ['gr-auto-flow', 'grid-auto-flow']),
            gar: toCSSRule(overrides, ['gr-auto-rows', 'grid-auto-rows']),
            gc: toCSSRule(overrides, ['gr-col', 'grid-column']),
            gce: toCSSRule(overrides, ['gr-col-end', 'grid-column-end']),
            gcg: pipe(parseArray, toCSSRule(overrides, ['gr-col-gap', 'grid-column-gap'])),
            gcs: toCSSRule(overrides, ['gr-col-start', 'grid-column-start']),
            gg: pipe(parseArray, toCSSRule(overrides, ['gr-gap', 'grid-gap'])),
            gr: toCSSRule(overrides, ['gr-row', 'grid-row']),
            gre: toCSSRule(overrides, ['gr-row-end', 'grid-row-end']),
            grg: pipe(parseArray, toCSSRule(overrides, ['', 'grid-row-gap'])),
            grs: toCSSRule(overrides, ['gr-row-start', 'grid-row-start']),
            gt: toCSSRule(overrides, ['gr-tmpl', 'grid-template']),
            gta: toCSSRule(overrides, ['gr-areas', 'grid-template-areas']),
            gtc: pipe(parseArray, toCSSRule(overrides, ['gr-cols', 'grid-template-columns'])),
            gtr: pipe(parseArray, toCSSRule(overrides, ['gr-rows', 'grid-template-rows'])),

            // Border
            b: toCSSRule(overrides, ['br', 'border']),
            bb: toCSSRule(overrides, ['br-bot', 'border-bottom']),
            bbc: toCSSRule(overrides, ['br-bot-color', 'border-bottom-color']),
            bblr: pipe(parseSingle, toCSSRule(overrides, ['br-bot-left-radius', 'border-bottom-left-radius'])),
            bbrr: pipe(parseSingle, toCSSRule(overrides, ['br-bot-right-radius', 'border-bottom-right-radius'])),
            bbs: toCSSRule(overrides, ['br-bot-style', 'border-bottom-style']),
            bbw: pipe(parseSingle, toCSSRule(overrides, ['br-bot-wid', 'border-bottom-width'])),
            bC: toCSSRule(overrides, ['br-coll', 'border-collapse']),
            bc: pipe(mapValue, toCSSRule(overrides, ['br-color', 'border-color'])),
            bi: pipe(mapValue, toCSSRule(overrides, ['br-img', 'border-image'])),
            bio: toCSSRule(overrides, ['br-img-outset', 'border-image-outset']),
            bir: toCSSRule(overrides, ['br-img-repeat', 'border-image-repeat']),
            bis: toCSSRule(overrides, ['br-img-slice', 'border-image-slice']),
            biSrc: toCSSRule(overrides, ['br-img-src', 'border-image-source']),
            biw: pipe(parseSingle, toCSSRule(overrides, ['br-img-width', 'border-image-width'])),
            bl: toCSSRule(overrides, ['br-left', 'border-left']),
            blc: pipe(mapValue, toCSSRule(overrides, ['br-left-color', 'border-left-color'])),
            bls: toCSSRule(overrides, ['br-left-style', 'border-left-style']),
            blw: toCSSRule(overrides, ['br-left-width', 'border-left-width']),
            r: pipe(mapValue, parseSingle, toCSSRule(overrides, ['br-radius', 'border-radius'])),
            br: toCSSRule(overrides, ['br-right', 'border-right']),
            brc: pipe(mapValue, toCSSRule(overrides, ['br-right-color', 'border-right-color'])),
            brs: toCSSRule(overrides, ['br-right-style', 'border-right-style']),
            brw: pipe(parseSingle, toCSSRule(overrides, ['br-right-width', 'border-right-width'])),
            bs: toCSSRule(overrides, ['br-spacing', 'border-spacing']),
            bS: toCSSRule(overrides, ['br-style', 'border-style']),
            bt: toCSSRule(overrides, ['br-top', 'border-top']),
            btc: pipe(mapValue, toCSSRule(overrides, ['br-top-color', 'border-top-color'])),
            btlr: pipe(mapValue, parseSingle, toCSSRule(overrides, ['br-top-left-radius', 'border-top-left-radius'])),
            btrr: pipe(mapValue, parseSingle, toCSSRule(overrides, ['br-top-right-radius', 'border-top-right-radius'])),
            bts: toCSSRule(overrides, ['br-top-style', 'border-top-style']),
            btw: pipe(parseSingle, toCSSRule(overrides, ['br-top-width', 'border-top-width'])),
            bw: pipe(parseSingle, toCSSRule(overrides, ['br-width', 'border-width'])),

            // Clip
            clip: toCSSRule(overrides, ['clip', 'clip']),
            clipPath: toCSSRule(overrides, ['clip-path', 'clip-path']),

            // General
            d: pipe(mapValue, toCSSRule(overrides, ['disp', 'display'])),
            pos: pipe(mapValue, toCSSRule(overrides, ['pos', 'position'])),
            T: pipe(parseSingle, toCSSRule(overrides, ['top', 'top'])),
            R: pipe(parseSingle, toCSSRule(overrides, ['right', 'right'])),
            B: pipe(parseSingle, toCSSRule(overrides, ['bottom', 'bottom'])),
            L: pipe(parseSingle, toCSSRule(overrides, ['left', 'left'])),
            z: toCSSRule(overrides, ['z-index', 'z-index']),
            c: pipe(mapValue, toCSSRule(overrides, ['color', 'color'])),
            o: pipe(mapValue, toCSSRule(overrides, ['over', 'overflow'])),
            ox: pipe(mapValue, toCSSRule(overrides, ['over-x', 'overflow-x'])),
            oy: pipe(mapValue, toCSSRule(overrides, ['over-y', 'overflow-y'])),
            fl: pipe(mapValue, toCSSRule(overrides, ['float', 'float'])),
            clr: pipe(mapValue, toCSSRule(overrides, ['clr', 'clear'])),
            v: pipe(mapValue, toCSSRule(overrides, ['visibility', 'visibility'])),

            // Columns
            col: toCSSRule(overrides, ['col', 'columns']),
            cc: toCSSRule(overrides, ['col-count', 'column-count']),
            cf: toCSSRule(overrides, ['col-fill', 'column-fill']),
            cg: pipe(parseSingle, toCSSRule(overrides, ['col-gap', 'column-gap'])),
            cr: toCSSRule(overrides, ['col-rule', 'column-rule']),
            crc: pipe(mapValue, toCSSRule(overrides, ['col-rule-color', 'column-rule-color'])),
            crs: toCSSRule(overrides, ['col-rule-style', 'column-rule-style']),
            crw: pipe(parseSingle, toCSSRule(overrides, ['col-rule-width', 'column-rule-width'])),
            cs: toCSSRule(overrides, ['col-span', 'column-span']),
            cw: pipe(parseSingle, toCSSRule(overrides, ['col-width', 'column-width'])),
            pba: toCSSRule(overrides, ['pb-after', 'page-break-after']),
            pbb: toCSSRule(overrides, ['pb-before', 'page-break-before']),
            pbi: toCSSRule(overrides, ['pb-inside', 'page-break-inside']),

            // Box
            shad: pipe(mapValue, toCSSRule(overrides, ['shadow', 'box-shadow'])),
            siz: toCSSRule(overrides, ['sizing', 'box-sizing']),

            // Misc
            of: pipe(mapValue, toCSSRule(overrides, ['obj-fit', 'object-fit'])),
            oP: toCSSRule(overrides, ['obj-pos', 'object-position']),
            op: pipe(mapValue, toCSSRule(overrides, ['opacity', 'opacity'])),
            or: toCSSRule(overrides, ['order', 'order']),
            ol: toCSSRule(overrides, ['outline', 'outline']),
            mbm: pipe(mapValue, toCSSRule(overrides, ['blend-mode', 'mix-blend-mode'])),
            ct: toCSSRule(overrides, ['content', 'content']),
            cur: pipe(mapValue, toCSSRule(overrides, ['cur', 'cursor'])),
            pe: pipe(mapValue, toCSSRule(overrides, ['p-events', 'pointer-events'])),
            fil: toCSSRule(overrides, ['filter', 'filter']),
            sb: pipe(mapValue, toCSSRule(overrides, ['s-behavior', 'scroll-behavior'])),
            sw: pipe(mapValue, toCSSRule(overrides, ['s-width', 'scrollbar-width'])),
            sh: pipe(mapValue, toCSSRule(overrides, ['s-height', 'scrollbar-height'])),
            us: pipe(mapValue, toCSSRule(overrides, ['u-select', 'user-select'])),

            // Customs
            raw: i => i,
            child
        },
        overrides
    )
}
